diff --git a/libsrc/core/simd_arm64.hpp b/libsrc/core/simd_arm64.hpp
index 5bc833fd..26f59d4f 100644
--- a/libsrc/core/simd_arm64.hpp
+++ b/libsrc/core/simd_arm64.hpp
@@ -18,6 +18,10 @@ namespace ngcore
     SIMD (SIMD<mask64,1> i0, SIMD<mask64,1> i1) { mask[0] = i0[0]; mask[1] = i1[0]; }
     // SIMD (float64x2_t _data) : mask{_data} { }
     SIMD (int64x2_t _data) : mask{_data} { }
+    static SIMD from_u64(uint64x2_t _data) {
+        return SIMD(vreinterpretq_s64_u64(_data));
+    }
+
     auto Data() const { return mask; }
     static constexpr int Size() { return 2; }
     // static NETGEN_INLINE SIMD<mask64, 2> GetMaskFromBits (unsigned int i);
@@ -72,12 +76,12 @@ namespace ngcore
 
   NETGEN_INLINE SIMD<mask64,2> operator== (SIMD<int64_t> a, SIMD<int64_t> b)
   {
-    return vceqq_u64(a.Data(), b.Data());
+    return SIMD<mask64,2>::from_u64(vceqq_s64(a.Data(), b.Data()));
   }
   
   NETGEN_INLINE SIMD<mask64,2> operator> (SIMD<int64_t> a, SIMD<int64_t> b)
   {
-    return vcgtq_s64(a.Data(), b.Data());
+    return SIMD<mask64,2>::from_u64(vcgtq_s64(a.Data(), b.Data()));
   }
 
   
@@ -214,23 +218,7 @@ namespace ngcore
     return FNMA(SIMD<double,2> (a), b, c);
   }
 
-  // ARM complex mult:
-  // https://arxiv.org/pdf/1901.07294.pdf
-  // c += a*b    (a0re, a0im, a1re, a1im, ...), 
-  NETGEN_INLINE void FMAComplex (SIMD<double,2> a, SIMD<double,2> b, SIMD<double,2> & c)
-  {
-    auto tmp = vcmlaq_f64(c.Data(), a.Data(), b.Data());   // are * b
-    c = vcmlaq_rot90_f64(tmp, a.Data(), b.Data());    // += i*aim * b
-  }
 
-  NETGEN_INLINE void FMAComplex (SIMD<double,4> a, SIMD<double,4> b, SIMD<double,4> & c)
-  {
-    SIMD<double,2> clo = c.Lo();
-    SIMD<double,2> chi = c.Hi();
-    FMAComplex (a.Lo(), b.Lo(), clo);
-    FMAComplex (a.Hi(), b.Hi(), chi);
-    c = SIMD<double,4> (clo, chi);
-  }
 
   
 
