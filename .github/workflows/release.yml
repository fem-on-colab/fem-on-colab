name: Release package archives

on:
  workflow_dispatch:

jobs:
  build-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: boost
            version: ""
          - package: fenics
            version: ""
          - package: fenicsx
            version: ""
          - package: firedrake
            version: ""
          - package: gcc
            version: "12.2.0"
          - package: gmsh
            version: ""
          - package: h5py
            version: ""
          - package: mock
            version: ""
          - package: mpi4py
            version: ""
          - package: ngsolve
            version: ""
          - package: OCC
            version: ""
          - package: petsc4py
            version: ""
          - package: pybind11
            version: ""
          - package: slepc4py
            version: ""
          - package: vtk
            version: ""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        id: setup-env
        shell: bash
        run: |
          # Get the short commit SHA from the repository
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
          echo "Commit short SHA: ${COMMIT_SHORT}"
          # Define an installation prefix for the package
          INSTALL_DIR="${GITHUB_WORKSPACE}/install/${{ matrix.package }}"
          echo "INSTALL_PREFIX=${INSTALL_DIR}" >> $GITHUB_ENV
          mkdir -p "$INSTALL_DIR"
          # Create the lib directory so that a later symlink for lib64 works correctly.
          mkdir -p "$INSTALL_DIR/lib"

      - name: Build package ${{ matrix.package }}
        id: build
        shell: bash
        run: |
          set -eo pipefail
          # Determine the uppercase version of the package name (e.g. gcc -> GCC)
          PACKAGE_UPPER=$(echo "${{ matrix.package }}" | tr '[:lower:]' '[:upper:]')
          # Force a build from source by setting the archive variable to "skip"
          export ${PACKAGE_UPPER}_ARCHIVE_PATH=skip
          echo "Using ${PACKAGE_UPPER}_ARCHIVE_PATH=skip"
          # Run the build script from the repository root to ensure correct relative paths.
          BUILD_SCRIPT="${GITHUB_WORKSPACE}/${{ matrix.package }}/build.sh"
          if [ -f "${BUILD_SCRIPT}" ]; then
              chmod +x "${BUILD_SCRIPT}"
              if [ -n "${{ matrix.version }}" ]; then
                  echo "Running build.sh with version '${{ matrix.version }}'"
                  if ! bash "${BUILD_SCRIPT}" "${{ matrix.version }}"; then
                      echo "Build failed for package ${{ matrix.package }}"
                      echo "build_success=false" >> $GITHUB_OUTPUT
                      exit 0
                  fi
              else
                  echo "Running build.sh without version"
                  if ! bash "${BUILD_SCRIPT}"; then
                      echo "Build failed for package ${{ matrix.package }}"
                      echo "build_success=false" >> $GITHUB_OUTPUT
                      exit 0
                  fi
              fi
          else
              echo "No build.sh found for package '${{ matrix.package }}'; skipping build."
              echo "build_success=false" >> $GITHUB_OUTPUT
              exit 0
          fi
          echo "build_success=true" >> $GITHUB_OUTPUT

      - name: Package package ${{ matrix.package }}
        id: package
        if: steps.build.outputs.build_success == 'true'
        shell: bash
        run: |
          cd "${GITHUB_WORKSPACE}"
          echo "Packaging package '${{ matrix.package }}'"
          # Run the packaging script; it is expected to create an archive named "<package>-install.tar.gz"
          bash scripts/prepare_for_installation.sh "${{ matrix.package }}"
          ARCHIVE_ORIG="${{ matrix.package }}-install.tar.gz"
          if [ ! -f "$ARCHIVE_ORIG" ]; then
            echo "ERROR: Archive '$ARCHIVE_ORIG' not found."
            exit 1
          fi
          ARCHIVE_NEW="${{ matrix.package }}-${COMMIT_SHORT}.tar.gz"
          mv "$ARCHIVE_ORIG" "$ARCHIVE_NEW"
          echo "archive_name=${ARCHIVE_NEW}" >> $GITHUB_OUTPUT

      - name: Create Git tag for ${{ matrix.package }}
        if: steps.build.outputs.build_success == 'true'
        shell: bash
        run: |
          TAG="${{ matrix.package }}-${COMMIT_SHORT}"
          echo "Creating tag: $TAG"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Create GitHub Release for ${{ matrix.package }}
        if: steps.build.outputs.build_success == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ matrix.package }}-${COMMIT_SHORT}
          name: "${{ matrix.package }} Release ${COMMIT_SHORT}"
          body: "Rebuilt package **${{ matrix.package }}** from commit **${COMMIT_SHORT}**."
          artifacts: ${{ steps.package.outputs.archive_name }}
