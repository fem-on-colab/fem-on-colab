diff --git a/dolfin/io/HDF5Interface.cpp b/dolfin/io/HDF5Interface.cpp
index 02bfd5875..9efac7a98 100644
--- a/dolfin/io/HDF5Interface.cpp
+++ b/dolfin/io/HDF5Interface.cpp
@@ -124,7 +124,7 @@ std::string HDF5Interface::get_filename(hid_t hdf5_file_handle)
   length = H5Fget_name(hdf5_file_handle, name.data(), length + 1);
   dolfin_assert(length > 0);

-  return std::string(name.begin(), name.end());
+  return std::string(name.begin(), name.end()).c_str(); // remove spurious trailing \0 termination
 }
 //-----------------------------------------------------------------------------
 const std::string HDF5Interface::get_attribute_type(
diff --git a/dolfin/common/utils.h b/dolfin/common/utils.h
index 291eac341..48efc2f77 100644
--- a/dolfin/common/utils.h
+++ b/dolfin/common/utils.h
@@ -44,28 +44,27 @@ namespace dolfin
     std::string container_to_string(const T& x, std::string delimiter,
                                     int precision, int linebreak=0)
   {
-    std::stringstream s;
-    s.precision(precision);
+    std::string s;
     if (!x.empty())
     {
       if (linebreak == 0)
       {
-        s << *x.begin();
+        s += std::to_string(*x.begin());
         for (auto it = x.begin() + 1; it != x.end(); ++it)
-          s << delimiter << *it;
+          s += delimiter + std::to_string(*it);
       }
       else
       {
         for (unsigned int i = 0 ; i != x.size(); ++i)
         {
           if ((i + 1)%linebreak == 0)
-            s << x[i] << std::endl;
+            s += std::to_string(x[i]) + "\n";
           else
-            s << x[i] << delimiter;
+            s += std::to_string(x[i]) + delimiter;
         }
       }
     }
-    return s.str();
+    return s;
   }

   /// Return string representation of given array
