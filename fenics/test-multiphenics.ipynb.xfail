{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import google.colab  # noqa: F401\n",
    "except ImportError:\n",
    "    import ufl  # noqa: F401\n",
    "    import dolfin  # noqa: F401\n",
    "else:\n",
    "    try:\n",
    "        import ufl\n",
    "        import dolfin\n",
    "    except ImportError:\n",
    "        !wget \"https://fem-on-colab.github.io/releases/fenics-install.sh\" -O \"/tmp/fenics-install.sh\" && bash \"/tmp/fenics-install.sh\"\n",
    "        import ufl  # noqa: F401\n",
    "        import dolfin  # noqa: F401"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import multiphenics\n",
    "except ImportError:\n",
    "    !pip3 install git+https://github.com/multiphenics/multiphenics.git\n",
    "    import multiphenics  # noqa: F401"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download data files\n",
    "!mkdir -p data\n",
    "![ -f data/circle_facet_region.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_facet_region.xml -O data/circle_facet_region.xml\n",
    "![ -f data/circle_physical_region.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_physical_region.xml -O data/circle_physical_region.xml\n",
    "![ -f data/circle.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle.xml -O data/circle.xml\n",
    "!mkdir -p data/circle_restriction_left.rtc.xml\n",
    "![ -f data/circle_restriction_left.rtc.xml/mesh_function_0.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_left.rtc.xml/mesh_function_0.xml -O data/circle_restriction_left.rtc.xml/mesh_function_0.xml\n",
    "![ -f data/circle_restriction_left.rtc.xml/mesh_function_1.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_left.rtc.xml/mesh_function_1.xml -O data/circle_restriction_left.rtc.xml/mesh_function_1.xml\n",
    "![ -f data/circle_restriction_left.rtc.xml/mesh_function_2.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_left.rtc.xml/mesh_function_2.xml -O data/circle_restriction_left.rtc.xml/mesh_function_2.xml\n",
    "!mkdir -p data/circle_restriction_right.rtc.xml\n",
    "![ -f data/circle_restriction_right.rtc.xml/mesh_function_0.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_right.rtc.xml/mesh_function_0.xml -O data/circle_restriction_right.rtc.xml/mesh_function_0.xml\n",
    "![ -f data/circle_restriction_right.rtc.xml/mesh_function_1.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_right.rtc.xml/mesh_function_1.xml -O data/circle_restriction_right.rtc.xml/mesh_function_1.xml\n",
    "![ -f data/circle_restriction_right.rtc.xml/mesh_function_2.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_right.rtc.xml/mesh_function_2.xml -O data/circle_restriction_right.rtc.xml/mesh_function_2.xml\n",
    "!mkdir -p data/circle_restriction_interface.rtc.xml\n",
    "![ -f data/circle_restriction_interface.rtc.xml/mesh_function_0.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_interface.rtc.xml/mesh_function_0.xml -O data/circle_restriction_interface.rtc.xml/mesh_function_0.xml\n",
    "![ -f data/circle_restriction_interface.rtc.xml/mesh_function_1.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_interface.rtc.xml/mesh_function_1.xml -O data/circle_restriction_interface.rtc.xml/mesh_function_1.xml\n",
    "![ -f data/circle_restriction_interface.rtc.xml/mesh_function_2.xml ] || wget https://github.com/multiphenics/multiphenics/raw/master/tutorials/03_lagrange_multipliers/data/circle_restriction_interface.rtc.xml/mesh_function_2.xml -O data/circle_restriction_interface.rtc.xml/mesh_function_2.xml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dolfin import *\n",
    "from multiphenics import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh = Mesh(\"data/circle.xml\")\n",
    "subdomains = MeshFunction(\"size_t\", mesh, \"data/circle_physical_region.xml\")\n",
    "boundaries = MeshFunction(\"size_t\", mesh, \"data/circle_facet_region.xml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "left = MeshRestriction(mesh, \"data/circle_restriction_left.rtc.xml\")\n",
    "right = MeshRestriction(mesh, \"data/circle_restriction_right.rtc.xml\")\n",
    "interface = MeshRestriction(mesh, \"data/circle_restriction_interface.rtc.xml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "V = FunctionSpace(mesh, \"Lagrange\", 2)\n",
    "W = BlockFunctionSpace([V, V, V], restrict=[left, right, interface])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "u1u2l = BlockTrialFunction(W)\n",
    "(u1, u2, l) = block_split(u1u2l)\n",
    "v1v2m = BlockTestFunction(W)\n",
    "(v1, v2, m) = block_split(v1v2m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dx = Measure(\"dx\")(subdomain_data=subdomains)\n",
    "ds = Measure(\"ds\")(subdomain_data=boundaries)\n",
    "dS = Measure(\"dS\")(subdomain_data=boundaries)\n",
    "dS = dS(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [[inner(grad(u1), grad(v1)) * dx(1), 0, l(\"-\") * v1(\"-\") * dS],\n",
    "     [0, inner(grad(u2), grad(v2)) * dx(2), - l(\"+\") * v2(\"+\") * dS],\n",
    "     [m(\"-\") * u1(\"-\") * dS, - m(\"+\") * u2(\"+\") * dS, 0]]\n",
    "f = [v1 * dx(1), v2 * dx(2), 0]\n",
    "\n",
    "bc1 = DirichletBC(W.sub(0), Constant(0.), boundaries, 1)\n",
    "bc2 = DirichletBC(W.sub(1), Constant(0.), boundaries, 1)\n",
    "bcs = BlockDirichletBC([bc1,\n",
    "                        bc2,\n",
    "                        None])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = block_assemble(a)\n",
    "F = block_assemble(f)\n",
    "bcs.apply(A)\n",
    "bcs.apply(F)\n",
    "\n",
    "U = BlockFunction(W)\n",
    "block_solve(A, U.block_vector(), F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "u = TrialFunction(V)\n",
    "v = TestFunction(V)\n",
    "A_ex = assemble(inner(grad(u), grad(v)) * dx)\n",
    "F_ex = assemble(v * dx)\n",
    "bc_ex = DirichletBC(V, Constant(0.), boundaries, 1)\n",
    "bc_ex.apply(A_ex)\n",
    "bc_ex.apply(F_ex)\n",
    "U_ex = Function(V)\n",
    "solve(A_ex, U_ex.vector(), F_ex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "err1 = Function(V)\n",
    "err1.vector().add_local(+ U_ex.vector().get_local())\n",
    "err1.vector().add_local(- U[0].vector().get_local())\n",
    "err1.vector().apply(\"\")\n",
    "err2 = Function(V)\n",
    "err2.vector().add_local(+ U_ex.vector().get_local())\n",
    "err2.vector().add_local(- U[1].vector().get_local())\n",
    "err2.vector().apply(\"\")\n",
    "err1_norm = sqrt(assemble(err1 * err1 * dx(1)) / assemble(U_ex * U_ex * dx(1)))\n",
    "err2_norm = sqrt(assemble(err2 * err2 * dx(2)) / assemble(U_ex * U_ex * dx(2)))\n",
    "print(\"Relative error on subdomain 1\", err1_norm)\n",
    "print(\"Relative error on subdomain 2\", err2_norm)\n",
    "assert np.isclose(err1_norm, 0., atol=1.e-10)\n",
    "assert np.isclose(err2_norm, 0., atol=1.e-10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%bash\n",
    "\n",
    "export LD_PRELOAD=\"\"\n",
    "ERROR_LIBRARIES=($(find /root/.cache/dijitso -name '*\\.so' -exec \\\n",
    "    bash -c 'ldd $0 | grep libstdc++.so.6 1>/dev/null 2>/dev/null && echo $0' {} \\;))\n",
    "if [ ${#ERROR_LIBRARIES[@]} -eq 0 ]; then\n",
    "    echo \"No reference to libstdc++.so was found\"\n",
    "else\n",
    "    for ERROR_LIBRARY in \"${ERROR_LIBRARIES[@]}\"; do\n",
    "        echo \"Error: library $ERROR_LIBRARY depends on libstdc++.so\"\n",
    "        ldd -v $ERROR_LIBRARY\n",
    "    done\n",
    "    false\n",
    "fi"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython"
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
