{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "mediterranean-century",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import google.colab  # noqa: F401\n",
    "except ImportError:\n",
    "    import dolfin\n",
    "else:\n",
    "    try:\n",
    "        import dolfin\n",
    "    except ImportError:\n",
    "        !wget \"https://fem-on-colab.github.io/releases/fenics-install.sh\" -O \"/tmp/fenics-install.sh\" && bash \"/tmp/fenics-install.sh\"\n",
    "        import dolfin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "received-partnership",
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh = dolfin.UnitIntervalMesh(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "reliable-tanzania",
   "metadata": {},
   "outputs": [],
   "source": [
    "V = dolfin.FunctionSpace(mesh, \"CG\", 1)\n",
    "assert V.dim() == 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "primary-cisco",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "upper-cancellation",
   "metadata": {},
   "outputs": [],
   "source": [
    "solution = dolfin.Function(V)\n",
    "solution.vector()[:] = np.arange(1, V.dim() + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "convinced-saver",
   "metadata": {},
   "outputs": [],
   "source": [
    "output_file = dolfin.XDMFFile(\"checkpoint.xdmf\")\n",
    "output_file.parameters[\"flush_output\"] = True\n",
    "output_file.write_checkpoint(solution, \"solution\", 0.0)\n",
    "output_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "obvious-reflection",
   "metadata": {},
   "outputs": [],
   "source": [
    "solution_from_file = dolfin.Function(V)\n",
    "input_file = dolfin.XDMFFile(\"checkpoint.xdmf\")\n",
    "input_file.read_checkpoint(solution_from_file, \"solution\", 0)\n",
    "input_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stainless-reporter",
   "metadata": {},
   "outputs": [],
   "source": [
    "assert np.allclose(solution_from_file.vector().vec().getArray(), np.arange(1, V.dim() + 1))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython"
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
